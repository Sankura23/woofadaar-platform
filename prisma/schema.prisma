generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Answer {
  id                 String   @id
  question_id        String
  user_id            String
  content            String
  upvotes            Int      @default(0)
  is_expert_verified Boolean  @default(false)
  created_at         DateTime @default(now())
  Question           Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  User               User     @relation(fields: [user_id], references: [id])
}

model Dog {
  id                        String                 @id @default(cuid())
  name                      String
  breed                     String
  age_months                Int
  weight_kg                 Float
  gender                    String
  vaccination_status        String
  spayed_neutered           Boolean
  microchip_id              String?
  emergency_contact         String?
  emergency_phone           String?
  medical_notes             String?
  personality_traits        String[]
  location                  String?
  photo_url                 String?
  health_id                 String?                @unique
  user_id                   String
  created_at                DateTime               @default(now())
  updated_at                DateTime               @default(now()) @updatedAt
  company_id                String?
  corporate_benefits_active Boolean                @default(false)
  is_corporate_pet          Boolean                @default(false)
  AIRecommendations         AIRecommendation[]
  Appointments              Appointment[]
  CommunityQuestions        CommunityQuestion[]
  DataSharingConsents       DataSharingConsent[]
  DiaryEntries              DiaryEntry[]
  company                   Company?               @relation("CompanyDogs", fields: [company_id], references: [id])
  User                      User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  DogIdVerifications        DogIdVerification[]
  DogPhotos                 DogPhoto[]
  DogShares                 DogShare[]
  EmergencyAccessLogs       EmergencyAccessLog[]
  EmergencyAlerts           EmergencyAlert[]
  EmergencyQRCode           EmergencyQRCode?
  HealthExports             HealthExport[]
  HealthIdVerifications     HealthIdVerification[]
  HealthInsights            HealthInsight[]
  HealthLogs                HealthLog[]
  HealthMetrics             HealthMetric[]
  HealthPhotos              HealthPhoto[]
  HealthPredictions         HealthPrediction[]
  HealthReminders           HealthReminder[]
  KCIVerifications          KCIVerification[]
  MedicalRecords            MedicalRecord[]
  MedicalRecordAccesses     MedicalRecordAccess[]
  MedicalRecordShares       MedicalRecordShare[]
  Medications               Medication[]
  PartnerBookings           PartnerBooking[]
  PartnerReviews            PartnerReview[]
  PetBenefitClaims          PetBenefitClaim[]
  SecureDataVault           SecureDataVault[]
  SharingAnalytics          SharingAnalytics[]
  VetAppointments           VetAppointment[]
  HealthAnalyticsReports    HealthAnalyticsReport[]
  HealthTrendAnalyses       HealthTrendAnalysis[]
  HealthAlerts              HealthAlert[]
  ExpertConsultations       ExpertConsultation[]
  EmergencyConsultations    EmergencyConsultation[]
}

model DogShare {
  id          String    @id @default(cuid())
  dog_id      String
  share_token String    @unique
  share_type  String    @default("public")
  expires_at  DateTime?
  created_by  String
  created_at  DateTime  @default(now())
  Dog         Dog       @relation(fields: [dog_id], references: [id], onDelete: Cascade)
}

model Question {
  id           String   @id
  user_id      String
  dog_id       String?
  title        String
  content      String
  category     String
  is_urgent    Boolean  @default(false)
  upvotes      Int      @default(0)
  answer_count Int      @default(0)
  created_at   DateTime @default(now())
  Answer       Answer[]
  User         User     @relation(fields: [user_id], references: [id])
}

model User {
  id                        String                     @id
  email                     String                     @unique
  name                      String
  password_hash             String
  location                  String?
  experience_level          String                     @default("beginner")
  barks_points              Int                        @default(0)
  is_premium                Boolean                    @default(false)
  profile_image_url         String?
  created_at                DateTime                   @default(now())
  updated_at                DateTime
  preferred_language        String                     @default("en")
  profile_visibility        String                     @default("public")
  reputation                Int                        @default(0)
  notification_prefs        Json?                      @default("{}")
  is_deactivated            Boolean                    @default(false)
  ABTestParticipants        ABTestParticipant[]
  AIRecommendations         AIRecommendation[]
  Answer                    Answer[]
  Appointments              Appointment[]
  AuditLogs                 AuditLog[]
  CommissionEarnings        CommissionEarning[]
  CommunityAnswers          CommunityAnswer[]
  CommunityComments         CommunityComment[]
  CommunityExperts          CommunityExpert[]
  ExpertVerifications       CommunityExpert[]          @relation("ExpertVerifications")
  ModeratedFlags            CommunityFlag[]            @relation("ModeratedFlags")
  CommunityFlags            CommunityFlag[]
  CommunityQuestions        CommunityQuestion[]
  CommunityVotes            CommunityVote[]
  ComplianceAudits          ComplianceAudit[]
  ContentRecommendations    ContentRecommendation[]
  CorporateAdmins           CorporateAdmin[]           @relation("CorporateAdmins")
  CorporateEmployees        CorporateEmployee[]
  DataSharingConsents       DataSharingConsent[]
  DiaryComments             DiaryComment[]
  DiaryEntries              DiaryEntry[]
  Dog                       Dog[]
  DogIdVerifications        DogIdVerification[]        @relation("VerifierUser")
  EmployeeEnrollments       EmployeeEnrollment[]       @relation("EmployeeEnrollments")
  ForumPosts                ForumPost[]
  HealthExports             HealthExport[]
  HealthLogs                HealthLog[]
  HealthMetrics             HealthMetric[]
  HealthPhotos              HealthPhoto[]
  HealthReminders           HealthReminder[]
  MedicalRecords            MedicalRecord[]
  MedicalRecordShares       MedicalRecordShare[]
  PartnerBookings           PartnerBooking[]
  PartnerCommissions        PartnerCommission[]
  PartnerNetworkConnections PartnerNetworkConnection[]
  PartnerReviews            PartnerReview[]
  Payments                  Payment[]
  PointTransactions         PointTransaction[]
  PremiumFeatureUsage       PremiumFeatureUsage[]
  ProfileBackups            ProfileBackup[]
  PushNotifications         PushNotification[]
  Question                  Question[]
  QuestionViews             QuestionView[]
  SearchAnalytics           SearchAnalytics[]
  SecurityAuditLogs         SecurityAuditLog[]
  Subscriptions             Subscription[]
  UserBadges                UserBadge[]
  UserBehaviorAnalytics     UserBehaviorAnalytics[]
  UserEngagements           UserEngagement[]
  UserFunnel                UserFunnel?
  UserPoints                UserPoints?
  CouponUsages              CouponUsage[]
  Invoices                  Invoice[]
  PaymentRetries            PaymentRetry[]
  DunningCampaigns          DunningCampaign[]
  HealthAnalyticsReports    HealthAnalyticsReport[]
  HealthAlerts              HealthAlert[]
  FeatureUsageLogs          FeatureUsageLog[]
  VetAppointments           VetAppointment[]
  ExpertConsultations       ExpertConsultation[]
  ExpertConsultationsGiven  ExpertConsultation[]     @relation("ExpertConsultations")
  ConsultationCredits       ConsultationCredit[]
  ExpertProfile             ExpertProfile?
  ExpertProfileVerifications ExpertProfile[]          @relation("ExpertVerifier")
  EmergencyConsultations    EmergencyConsultation[]
  EmergencyExpertSessions   EmergencyConsultation[]  @relation("EmergencyExpert")
  
  // Week 28: Event System Relationships
  organized_events          Event[]                  @relation("EventOrganizer")
  event_rsvps              EventRSVP[]
  event_waiting_list       EventWaitingList[]
  event_photos             EventPhoto[]             @relation("EventPhotoUploader")
  event_photo_likes        EventPhotoLike[]         @relation("EventPhotoLiker")
  event_comments           EventComment[]           @relation("EventCommenter")
  event_updates            EventUpdate[]            @relation("EventUpdater")
  event_feedback           EventFeedback[]          @relation("EventFeedbackProvider")
  event_check_ins          EventCheckIn[]           @relation("EventCheckInUser")
  event_series             EventSeries[]            @relation("EventSeriesOrganizer")
}

model ProfileBackup {
  id         String   @id @default(cuid())
  user_id    String
  data       Json
  created_at DateTime @default(now())
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         String   @id @default(cuid())
  user_id    String
  action     String
  details    Json?
  created_at DateTime @default(now())
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Waitlist {
  id                 String   @id
  email              String   @unique
  name               String
  location           String?
  phone              String?
  dog_owner          Boolean  @default(false)
  preferred_language String   @default("en")
  referral_source    String?
  interests          String?
  status             String   @default("active")
  position           Int?
  created_at         DateTime @default(now())
  updated_at         DateTime
}

model Partner {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  name                      String
  password                  String?
  partner_type              String
  business_name             String?
  license_number            String?
  specialization            Json?
  experience_years          Int?
  location                  String
  address                   String?
  phone                     String
  website                   String?
  bio                       String?
  services_offered          Json?
  pricing_info              Json?
  availability_schedule     Json?
  languages_spoken          String[]
  certifications            String[]
  verified                  Boolean                    @default(false)
  verification_date         DateTime?
  status                    String                     @default("pending")
  admin_notes               String?
  health_id_access          Boolean                    @default(false)
  profile_image_url         String?
  partnership_tier          String                     @default("basic")
  kci_verified              Boolean                    @default(false)
  kci_registration_id       String?
  rating_average            Float                      @default(0.0)
  rating_count              Int                        @default(0)
  commission_rate           Float                      @default(0.0)
  subscription_status       String                     @default("active")
  subscription_expires      DateTime?
  monthly_revenue           Float                      @default(0.0)
  total_appointments        Int                        @default(0)
  dog_id_integrated         Boolean                    @default(false)
  total_reviews             Int                        @default(0)
  consultation_fee_range    Json?
  emergency_available       Boolean                    @default(false)
  home_visit_available      Boolean                    @default(false)
  online_consultation       Boolean                    @default(false)
  response_time_hours       Int?
  service_radius_km         Int?
  languages_primary         String                     @default("english")
  verification_documents    Json?
  social_media_links        Json?
  business_hours            Json?
  holiday_schedule          Json?
  cancellation_policy       String?
  refund_policy             String?
  terms_conditions          String?
  last_active_at            DateTime                   @default(now())
  created_at                DateTime                   @default(now())
  updated_at                DateTime                   @updatedAt
  api_rate_limit            Int                        @default(100)
  compliance_status         String                     @default("pending")
  digital_certificate_hash  String?
  dog_id_access_level       String                     @default("basic")
  emergency_access_enabled  Boolean                    @default(false)
  last_dog_id_access        DateTime?
  mfa_enabled               Boolean                    @default(false)
  total_verifications_count Int                        @default(0)
  Appointments              Appointment[]
  CommissionEarnings        CommissionEarning[]
  CommunityExperts          CommunityExpert[]
  DataSharingConsents       DataSharingConsent[]
  DogIdVerifications        DogIdVerification[]
  EmergencyVetLocations     EmergencyVetLocation[]
  HealthIdVerifications     HealthIdVerification[]
  KCIVerifications          KCIVerification[]
  MedicalRecordAccesses     MedicalRecordAccess[]
  MedicalRecordShares       MedicalRecordShare[]
  PrescribedMedications     Medication[]
  PartnerBookings           PartnerBooking[]
  RequestingConnections     PartnerNetworkConnection[] @relation("RequestingPartner")
  TargetConnections         PartnerNetworkConnection[] @relation("TargetPartner")
  PartnerNotifications      PartnerNotification[]
  Reviews                   PartnerReview[]
  SecurityAuditLogs         SecurityAuditLog[]
  SharingAnalytics          SharingAnalytics[]
  VetAppointments           VetAppointment[]
  VetAppointmentSlots       VetAppointmentSlot[]
  VetPartnerProfile         VetPartnerProfile?

  @@index([partner_type])
  @@index([location])
  @@index([verified])
  @@index([status])
  @@index([partnership_tier])
  @@index([kci_verified])
  @@index([rating_average])
  @@index([emergency_available])
  @@index([home_visit_available])
  @@index([online_consultation])
  @@index([last_active_at])
}

model HealthIdVerification {
  id                String   @id @default(cuid())
  partner_id        String
  dog_id            String
  verification_date DateTime @default(now())
  purpose           String?
  notes             String?
  verified_by       String
  dog               Dog      @relation(fields: [dog_id], references: [id])
  partner           Partner  @relation(fields: [partner_id], references: [id], onDelete: Cascade)

  @@index([dog_id])
  @@index([partner_id])
  @@index([verification_date])
}

model KCIVerification {
  id                  String    @id @default(cuid())
  partner_id          String?
  dog_id              String?
  kci_registration_id String    @unique
  breed               String
  dog_name            String?
  owner_name          String?
  registration_date   DateTime?
  verification_status String    @default("pending")
  verification_data   Json?
  verified_at         DateTime?
  created_at          DateTime  @default(now())
  dog                 Dog?      @relation(fields: [dog_id], references: [id])
  partner             Partner?  @relation(fields: [partner_id], references: [id])

  @@index([kci_registration_id])
  @@index([verification_status])
  @@index([breed])
}

model Appointment {
  id               String              @id @default(cuid())
  partner_id       String
  user_id          String
  dog_id           String?
  appointment_date DateTime
  duration_minutes Int                 @default(60)
  service_type     String
  status           String              @default("scheduled")
  notes            String?
  consultation_fee Float?
  payment_status   String              @default("pending")
  meeting_type     String              @default("in_person")
  meeting_link     String?
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt
  dog              Dog?                @relation(fields: [dog_id], references: [id])
  partner          Partner             @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  user             User                @relation(fields: [user_id], references: [id])
  commissions      CommissionEarning[]
  reviews          PartnerReview[]

  @@index([partner_id])
  @@index([user_id])
  @@index([appointment_date])
  @@index([status])
}

model PartnerReview {
  id                 String          @id @default(cuid())
  partner_id         String
  user_id            String
  dog_id             String?
  appointment_id     String?
  partner_booking_id String?
  rating             Int
  review_text        String?
  service_type       String?
  service_quality    Int?
  communication      Int?
  punctuality        Int?
  overall_experience Int?
  would_recommend    Boolean?
  is_verified        Boolean         @default(false)
  is_featured        Boolean         @default(false)
  admin_approved     Boolean         @default(false)
  photos             String[]
  created_at         DateTime        @default(now())
  updated_at         DateTime        @default(now()) @updatedAt
  appointment        Appointment?    @relation(fields: [appointment_id], references: [id])
  dog                Dog?            @relation(fields: [dog_id], references: [id])
  partner_booking    PartnerBooking? @relation(fields: [partner_booking_id], references: [id])
  partner            Partner         @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  user               User            @relation(fields: [user_id], references: [id])

  @@unique([user_id, partner_id, appointment_id])
  @@index([partner_id])
  @@index([rating])
  @@index([created_at])
  @@index([is_featured])
  @@index([admin_approved])
}

model CommissionEarning {
  id                String       @id @default(cuid())
  partner_id        String
  user_id           String
  appointment_id    String?
  commission_type   String
  base_amount       Float
  commission_rate   Float
  commission_amount Float
  status            String       @default("pending")
  paid_at           DateTime?
  created_at        DateTime     @default(now())
  appointment       Appointment? @relation(fields: [appointment_id], references: [id])
  partner           Partner      @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  user              User         @relation(fields: [user_id], references: [id])

  @@index([partner_id])
  @@index([status])
  @@index([commission_type])
  @@index([created_at])
}

model PartnerBooking {
  id                   String          @id @default(cuid())
  partner_id           String
  user_id              String
  dog_id               String?
  service_type         String
  booking_type         String
  appointment_datetime DateTime
  duration_minutes     Int             @default(60)
  status               String          @default("pending")
  notes                String?
  user_notes           String?
  partner_notes        String?
  price                Float?
  commission_amount    Float?
  payment_status       String          @default("pending")
  payment_method       String?
  payment_id           String?
  emergency_level      String?
  symptoms             String[]
  preferred_language   String?
  special_requirements String?
  follow_up_required   Boolean         @default(false)
  follow_up_date       DateTime?
  cancelled_by         String?
  cancellation_reason  String?
  cancelled_at         DateTime?
  refund_amount        Float?
  refund_processed_at  DateTime?
  created_at           DateTime        @default(now())
  updated_at           DateTime        @default(now()) @updatedAt
  dog                  Dog?            @relation(fields: [dog_id], references: [id])
  partner              Partner         @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  user                 User            @relation(fields: [user_id], references: [id])
  reviews              PartnerReview[]

  @@index([partner_id])
  @@index([user_id])
  @@index([dog_id])
  @@index([service_type])
  @@index([booking_type])
  @@index([status])
  @@index([appointment_datetime])
  @@index([payment_status])
  @@index([created_at])
}

model CorporateEnrollment {
  id                String              @id @default(cuid())
  company_name      String
  company_email     String
  contact_person    String
  contact_phone     String
  employee_count    Int
  enrolled_pets     Int                 @default(0)
  package_type      String
  monthly_fee       Float
  status            String              @default("active")
  billing_cycle     String              @default("monthly")
  next_billing_date DateTime
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  employees         CorporateEmployee[]

  @@index([company_email])
  @@index([status])
  @@index([package_type])
}

model CorporateEmployee {
  id                      String              @id @default(cuid())
  corporate_enrollment_id String
  employee_email          String
  employee_name           String
  user_id                 String?
  pets_enrolled           Int                 @default(0)
  enrollment_date         DateTime            @default(now())
  status                  String              @default("active")
  corporate_enrollment    CorporateEnrollment @relation(fields: [corporate_enrollment_id], references: [id], onDelete: Cascade)
  user                    User?               @relation(fields: [user_id], references: [id])

  @@unique([corporate_enrollment_id, employee_email])
  @@index([corporate_enrollment_id])
  @@index([employee_email])
  @@index([status])
}

model MedicalRecord {
  id                 String    @id @default(cuid())
  dog_id             String
  user_id            String
  record_type        String
  record_date        DateTime
  title              String
  description        String?
  vet_name           String?
  vet_clinic         String?
  vet_contact        String?
  medications        Json?
  next_due_date      DateTime?
  documents          Json?
  photos             Json?
  cost               Float?
  diagnosis          String?
  treatment_plan     String?
  follow_up_required Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now()) @updatedAt
  dog                Dog       @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  user               User      @relation(fields: [user_id], references: [id])

  @@index([dog_id])
  @@index([record_type])
  @@index([record_date])
  @@index([next_due_date])
}

model HealthReminder {
  id              String    @id @default(cuid())
  dog_id          String
  user_id         String
  reminder_type   String
  title           String
  description     String?
  medication_name String?
  dosage          String?
  frequency       String
  reminder_time   String?
  days_of_week    String[]
  start_date      DateTime
  end_date        DateTime?
  next_reminder   DateTime
  last_reminded   DateTime?
  is_active       Boolean   @default(true)
  auto_complete   Boolean   @default(false)
  reminder_count  Int       @default(0)
  max_reminders   Int?
  snooze_until    DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt
  dog             Dog       @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [user_id], references: [id])

  @@index([dog_id])
  @@index([user_id])
  @@index([reminder_type])
  @@index([next_reminder])
  @@index([is_active])
}

model HealthMetric {
  id               String   @id @default(cuid())
  dog_id           String
  user_id          String
  metric_type      String
  value            Float
  unit             String
  measurement_date DateTime
  notes            String?
  measured_by      String?
  device_used      String?
  created_at       DateTime @default(now())
  dog              Dog      @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [user_id], references: [id])

  @@index([dog_id])
  @@index([metric_type])
  @@index([measurement_date])
}

model HealthInsight {
  id               String    @id @default(cuid())
  dog_id           String
  insight_type     String
  category         String
  title            String
  description      String
  severity         String    @default("info")
  data_points      Json?
  recommendations  String[]
  is_read          Boolean   @default(false)
  is_dismissed     Boolean   @default(false)
  confidence_score Float?
  created_at       DateTime  @default(now())
  expires_at       DateTime?
  dog              Dog       @relation(fields: [dog_id], references: [id], onDelete: Cascade)

  @@index([dog_id])
  @@index([insight_type])
  @@index([category])
  @@index([is_read])
  @@index([created_at])
}

model HealthPhoto {
  id                String   @id @default(cuid())
  dog_id            String
  user_id           String
  photo_url         String
  thumbnail_url     String?
  photo_type        String
  title             String?
  description       String?
  tags              String[]
  health_log_id     String?
  medical_record_id String?
  taken_at          DateTime
  location          String?
  visibility        String   @default("private")
  created_at        DateTime @default(now())
  dog               Dog      @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [user_id], references: [id])

  @@index([dog_id])
  @@index([photo_type])
  @@index([taken_at])
  @@index([health_log_id])
  @@index([medical_record_id])
}

model HealthExport {
  id               String   @id @default(cuid())
  dog_id           String
  user_id          String
  export_type      String
  date_range_start DateTime
  date_range_end   DateTime
  data_types       String[]
  file_url         String?
  file_size        Int?
  status           String   @default("processing")
  download_count   Int      @default(0)
  expires_at       DateTime
  error_message    String?
  created_at       DateTime @default(now())
  dog              Dog      @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [user_id], references: [id])

  @@index([dog_id])
  @@index([user_id])
  @@index([export_type])
  @@index([status])
  @@index([expires_at])
}

model CommunityQuestion {
  id             String             @id @default(cuid())
  user_id        String
  dog_id         String?
  title          String
  content        String
  tags           String[]
  category       String
  is_resolved    Boolean            @default(false)
  best_answer_id String?
  view_count     Int                @default(0)
  upvotes        Int                @default(0)
  downvotes      Int                @default(0)
  answer_count   Int                @default(0)
  is_pinned      Boolean            @default(false)
  is_featured    Boolean            @default(false)
  status         String             @default("active")
  photo_url      String?
  location       String?
  created_at     DateTime           @default(now())
  updated_at     DateTime           @default(now()) @updatedAt
  answers        CommunityAnswer[]
  comments       CommunityComment[]
  flags          CommunityFlag[]
  dog            Dog?               @relation(fields: [dog_id], references: [id])
  user           User               @relation(fields: [user_id], references: [id])
  votes          CommunityVote[]
  views          QuestionView[]

  @@index([user_id])
  @@index([dog_id])
  @@index([category])
  @@index([tags])
  @@index([is_resolved])
  @@index([status])
  @@index([created_at])
}

model CommunityAnswer {
  id                 String             @id @default(cuid())
  question_id        String
  user_id            String
  content            String
  is_best_answer     Boolean            @default(false)
  upvotes            Int                @default(0)
  downvotes          Int                @default(0)
  is_verified_expert Boolean            @default(false)
  photo_url          String?
  status             String             @default("active")
  created_at         DateTime           @default(now())
  updated_at         DateTime           @default(now()) @updatedAt
  question           CommunityQuestion  @relation(fields: [question_id], references: [id], onDelete: Cascade)
  user               User               @relation(fields: [user_id], references: [id])
  comments           CommunityComment[]
  flags              CommunityFlag[]
  votes              CommunityVote[]

  @@index([question_id])
  @@index([user_id])
  @@index([is_best_answer])
  @@index([status])
  @@index([created_at])
}

model CommunityComment {
  id            String             @id @default(cuid())
  user_id       String
  question_id   String?
  answer_id     String?
  forum_post_id String?
  content       String
  upvotes       Int                @default(0)
  downvotes     Int                @default(0)
  status        String             @default("active")
  created_at    DateTime           @default(now())
  updated_at    DateTime           @default(now()) @updatedAt
  answer        CommunityAnswer?   @relation(fields: [answer_id], references: [id], onDelete: Cascade)
  forum_post    ForumPost?         @relation(fields: [forum_post_id], references: [id], onDelete: Cascade)
  question      CommunityQuestion? @relation(fields: [question_id], references: [id], onDelete: Cascade)
  user          User               @relation(fields: [user_id], references: [id])
  flags         CommunityFlag[]

  @@index([user_id])
  @@index([question_id])
  @@index([answer_id])
  @@index([forum_post_id])
  @@index([status])
  @@index([created_at])
}

model ForumCategory {
  id          String      @id @default(cuid())
  name        String
  description String
  slug        String      @unique
  icon        String
  color       String
  is_active   Boolean     @default(true)
  sort_order  Int         @default(0)
  post_count  Int         @default(0)
  created_at  DateTime    @default(now())
  posts       ForumPost[]

  @@index([slug])
  @@index([is_active])
  @@index([sort_order])
}

model ForumPost {
  id            String             @id @default(cuid())
  user_id       String
  category_id   String
  title         String
  content       String
  tags          String[]
  is_pinned     Boolean            @default(false)
  is_featured   Boolean            @default(false)
  is_locked     Boolean            @default(false)
  view_count    Int                @default(0)
  like_count    Int                @default(0)
  comment_count Int                @default(0)
  status        String             @default("active")
  photo_url     String?
  created_at    DateTime           @default(now())
  updated_at    DateTime           @default(now()) @updatedAt
  comments      CommunityComment[]
  flags         CommunityFlag[]
  category      ForumCategory      @relation(fields: [category_id], references: [id])
  user          User               @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([category_id])
  @@index([tags])
  @@index([status])
  @@index([created_at])
}

model CommunityFlag {
  id              String             @id @default(cuid())
  user_id         String
  question_id     String?
  answer_id       String?
  comment_id      String?
  forum_post_id   String?
  reason          String
  description     String?
  status          String             @default("pending")
  moderator_id    String?
  moderator_notes String?
  created_at      DateTime           @default(now())
  resolved_at     DateTime?
  answer          CommunityAnswer?   @relation(fields: [answer_id], references: [id], onDelete: Cascade)
  comment         CommunityComment?  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  forum_post      ForumPost?         @relation(fields: [forum_post_id], references: [id], onDelete: Cascade)
  moderator       User?              @relation("ModeratedFlags", fields: [moderator_id], references: [id])
  question        CommunityQuestion? @relation(fields: [question_id], references: [id], onDelete: Cascade)
  user            User               @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([question_id])
  @@index([answer_id])
  @@index([comment_id])
  @@index([forum_post_id])
  @@index([status])
  @@index([created_at])
}

model UserEngagement {
  id            String   @id @default(cuid())
  user_id       String
  action_type   String
  points_earned Int
  description   String
  related_id    String?
  related_type  String?
  created_at    DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([action_type])
  @@index([created_at])
}

model UserBadge {
  id                String   @id @default(cuid())
  user_id           String
  badge_type        String
  badge_name        String
  badge_description String
  badge_icon        String
  badge_color       String
  earned_at         DateTime @default(now())
  user              User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([badge_type])
  @@index([earned_at])
}

model CommunityExpert {
  id                  String    @id @default(cuid())
  user_id             String
  partner_id          String?
  expertise_areas     String[]
  verification_status String    @default("pending")
  verification_date   DateTime?
  verified_by         String?
  bio                 String?
  years_experience    Int?
  certifications      String[]
  specializations     String[]
  is_featured         Boolean   @default(false)
  answer_count        Int       @default(0)
  best_answer_count   Int       @default(0)
  total_points        Int       @default(0)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
  partner             Partner?  @relation(fields: [partner_id], references: [id])
  user                User      @relation(fields: [user_id], references: [id])
  verifier            User?     @relation("ExpertVerifications", fields: [verified_by], references: [id])

  @@index([user_id])
  @@index([partner_id])
  @@index([expertise_areas])
  @@index([verification_status])
  @@index([is_featured])
}

model CommunityVote {
  id          String             @id @default(cuid())
  user_id     String
  question_id String?
  answer_id   String?
  vote_type   String
  created_at  DateTime           @default(now())
  answer      CommunityAnswer?   @relation(fields: [answer_id], references: [id], onDelete: Cascade)
  question    CommunityQuestion? @relation(fields: [question_id], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [user_id], references: [id])

  @@unique([user_id, question_id])
  @@unique([user_id, answer_id])
  @@index([user_id])
  @@index([question_id])
  @@index([answer_id])
  @@index([vote_type])
}

model QuestionView {
  id                  String            @id @default(cuid())
  question_id         String
  user_id             String?
  session_fingerprint String
  created_at          DateTime          @default(now())
  question            CommunityQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)
  user                User?             @relation(fields: [user_id], references: [id])

  @@index([question_id])
  @@index([user_id])
  @@index([session_fingerprint])
  @@index([created_at])
}

model UserPoints {
  id                    String             @id @default(cuid())
  user_id               String             @unique
  points_earned         Int                @default(0)
  points_spent          Int                @default(0)
  current_balance       Int                @default(0)
  total_lifetime_points Int                @default(0)
  last_daily_bonus      DateTime?
  streak_count          Int                @default(0)
  achievements          Json               @default("[]")
  badges                Json               @default("[]")
  level                 Int                @default(1)
  experience_points     Int                @default(0)
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now()) @updatedAt
  PointTransactions     PointTransaction[]
  user                  User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([current_balance])
  @@index([level])
  @@index([streak_count])
}

model PointTransaction {
  id               String     @id @default(cuid())
  user_id          String
  points_amount    Int
  transaction_type String
  source           String
  source_id        String?
  description      String
  created_at       DateTime   @default(now())
  user             User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_points      UserPoints @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "PointTransaction_user_points_fkey")

  @@index([user_id])
  @@index([transaction_type])
  @@index([source])
  @@index([created_at])
}

model Translation {
  id                  String   @id @default(cuid())
  content_id          String
  content_type        String
  original_language   String   @default("en")
  target_language     String
  original_text       String
  translated_text     String
  translation_quality Float?
  is_human_verified   Boolean  @default(false)
  verified_by         String?
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now()) @updatedAt

  @@unique([content_id, content_type, target_language])
  @@index([content_id, content_type])
  @@index([target_language])
  @@index([original_language])
}

model CommunityTrending {
  id               String   @id @default(cuid())
  content_id       String
  content_type     String
  trend_score      Float
  view_velocity    Float
  engagement_score Float
  time_period      String
  language         String   @default("en")
  category         String?
  location         String?
  created_at       DateTime @default(now())
  expires_at       DateTime

  @@index([trend_score])
  @@index([content_type])
  @@index([time_period])
  @@index([language])
  @@index([category])
  @@index([created_at])
  @@index([expires_at])
}

model HealthLog {
  id                  String   @id @default(cuid())
  dog_id              String
  user_id             String
  log_date            DateTime @db.Date
  food_amount         Float?
  food_type           String?
  water_intake        Float?
  exercise_duration   Int?
  exercise_type       String?
  bathroom_frequency  Int?
  weight_kg           Float?
  temperature_celsius Float?
  notes               String?
  photos              Json     @default("[]")
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now()) @updatedAt
  appetite_level      Int?
  energy_level        Int?
  symptoms            Json     @default("[]")
  mood_score          Int?
  dog                 Dog      @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([dog_id, log_date])
  @@index([dog_id])
  @@index([user_id])
  @@index([log_date])
  @@index([created_at])
}

model Medication {
  id                 String    @id @default(cuid())
  dog_id             String
  name               String
  dosage             String?
  frequency          String
  start_date         DateTime  @db.Date
  end_date           DateTime? @db.Date
  prescribed_by      String?
  instructions       String?
  reminder_times     Json      @default("[]")
  is_active          Boolean   @default(true)
  medication_type    String    @default("oral")
  side_effects       String?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now()) @updatedAt
  dog                Dog       @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  prescribed_partner Partner?  @relation(fields: [prescribed_by], references: [id])

  @@index([dog_id])
  @@index([prescribed_by])
  @@index([is_active])
  @@index([start_date])
  @@index([end_date])
}

model VetAppointment {
  id                     String    @id @default(cuid())
  dog_id                 String
  user_id                String?   // Premium feature: user tracking
  vet_id                 String?
  slot_id                String?   // Premium feature: slot-based booking
  appointment_datetime   DateTime
  appointment_time       String?   // Premium feature: specific time slot
  reason                 String
  diagnosis              String?
  treatment              String?
  medications_prescribed Json      @default("[]")
  follow_up_date         DateTime? @db.Date
  follow_up_notes        String?   // Premium feature: detailed follow-up
  cost                   Float?
  payment_status         String    @default("pending") // Premium feature: payment tracking
  payment_id             String?   // Premium feature: payment integration
  status                 String    @default("scheduled")
  priority_level         String    @default("normal") // Premium feature: priority booking
  notes                  String?
  consultation_notes     String?   @db.Text // Premium feature: detailed consultation notes
  prescription           Json?     // Premium feature: structured prescription data
  documents              Json      @default("[]")
  appointment_type       String    @default("checkup")
  duration_minutes       Int       @default(30)
  meeting_link           String?   // Premium feature: telemedicine
  meeting_password       String?   // Premium feature: telemedicine security
  reminder_sent          Boolean   @default(false) // Premium feature: automated reminders
  rating                 Int?      // Premium feature: rating system
  feedback               String?   @db.Text // Premium feature: detailed feedback
  is_premium_booking     Boolean   @default(false) // Premium feature flag
  booking_source         String    @default("app") // Premium feature: booking analytics
  emergency_consultation Boolean   @default(false) // Premium feature: emergency access
  metadata               Json?     // Premium feature: extensible data
  created_at             DateTime  @default(now())
  updated_at             DateTime  @default(now()) @updatedAt
  
  // Relationships
  dog                    Dog       @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  vet                    Partner?  @relation(fields: [vet_id], references: [id])
  user                   User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  slot                   VetAppointmentSlot? @relation(fields: [slot_id], references: [id], onDelete: SetNull)
  payment                Payment?  @relation(fields: [payment_id], references: [id], onDelete: SetNull)
  emergency_sessions     EmergencyConsultation[]

  @@index([dog_id])
  @@index([user_id])
  @@index([vet_id])
  @@index([slot_id])
  @@index([appointment_datetime])
  @@index([status])
  @@index([appointment_type])
  @@index([priority_level])
  @@index([is_premium_booking])
  @@index([payment_status])
}

model DiaryEntry {
  id             String         @id @default(cuid())
  dog_id         String
  user_id        String
  title          String
  content        String
  entry_type     String         @default("general")
  milestone_type String?
  photos         Json           @default("[]")
  tags           Json           @default("[]")
  privacy_level  String         @default("public")
  reactions      Json           @default("{}")
  comments_count Int            @default(0)
  likes_count    Int            @default(0)
  shares_count   Int            @default(0)
  is_featured    Boolean        @default(false)
  mood_emoji     String?
  location       String?
  weather        String?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now()) @updatedAt
  comments       DiaryComment[]
  dog            Dog            @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([dog_id])
  @@index([user_id])
  @@index([entry_type])
  @@index([privacy_level])
  @@index([created_at])
  @@index([is_featured])
}

model Company {
  id                   String               @id @default(cuid())
  name                 String
  email_domain         String               @unique
  industry             String?
  employee_count       Int?
  address              String?
  billing_address      String?
  contact_person       String?
  contact_email        String?
  contact_phone        String?
  logo_url             String?
  subscription_tier    String               @default("basic")
  billing_cycle        String               @default("monthly")
  status               String               @default("active")
  created_at           DateTime             @default(now())
  updated_at           DateTime             @default(now()) @updatedAt
  corporate_admins     CorporateAdmin[]
  corporate_billing    CorporateBilling[]
  dogs                 Dog[]                @relation("CompanyDogs")
  employee_enrollments EmployeeEnrollment[]

  @@index([email_domain])
  @@index([subscription_tier])
  @@index([status])
}

model CorporateAdmin {
  id              String            @id @default(cuid())
  company_id      String
  user_id         String
  role            String            @default("admin")
  permissions     Json              @default("[]")
  created_at      DateTime          @default(now())
  company         Company           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  user            User              @relation("CorporateAdmins", fields: [user_id], references: [id], onDelete: Cascade)
  approved_claims PetBenefitClaim[] @relation("ApprovedClaims")

  @@index([company_id])
  @@index([user_id])
}

model EmployeeEnrollment {
  id                  String            @id @default(cuid())
  company_id          String
  employee_user_id    String?
  employee_email      String
  employee_name       String?
  department          String?
  enrollment_date     DateTime          @default(now())
  status              String            @default("active")
  pet_allowance_used  Float             @default(0.00)
  pet_allowance_limit Float             @default(5000.00)
  created_at          DateTime          @default(now())
  company             Company           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  employee_user       User?             @relation("EmployeeEnrollments", fields: [employee_user_id], references: [id])
  benefit_claims      PetBenefitClaim[]

  @@index([company_id])
  @@index([employee_user_id])
  @@index([employee_email])
}

model CorporateBilling {
  id                   String    @id @default(cuid())
  company_id           String
  billing_period_start DateTime  @db.Date
  billing_period_end   DateTime  @db.Date
  employee_count       Int
  pet_count            Int
  base_amount          Float
  discount_amount      Float     @default(0.00)
  tax_amount           Float     @default(0.00)
  total_amount         Float
  currency             String    @default("INR")
  status               String    @default("pending")
  invoice_url          String?
  payment_date         DateTime?
  created_at           DateTime  @default(now())
  company              Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([company_id])
  @@index([status])
  @@index([billing_period_start])
}

model PetBenefitClaim {
  id                     String             @id @default(cuid())
  employee_enrollment_id String
  dog_id                 String?
  claim_type             String
  claim_amount           Float
  receipt_url            String?
  claim_date             DateTime           @db.Date
  approval_status        String             @default("pending")
  approved_amount        Float?
  approved_by            String?
  approved_at            DateTime?
  notes                  String?
  created_at             DateTime           @default(now())
  approver               CorporateAdmin?    @relation("ApprovedClaims", fields: [approved_by], references: [id])
  dog                    Dog?               @relation(fields: [dog_id], references: [id])
  employee_enrollment    EmployeeEnrollment @relation(fields: [employee_enrollment_id], references: [id], onDelete: Cascade)

  @@index([employee_enrollment_id])
  @@index([dog_id])
  @@index([approval_status])
  @@index([claim_date])
}

model DiaryComment {
  id             String     @id @default(cuid())
  diary_entry_id String
  user_id        String
  content        String
  created_at     DateTime   @default(now())
  updated_at     DateTime   @default(now()) @updatedAt
  diary_entry    DiaryEntry @relation(fields: [diary_entry_id], references: [id], onDelete: Cascade)
  user           User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([diary_entry_id])
  @@index([user_id])
  @@index([created_at])
}

model Forum {
  id              String   @id @default(cuid())
  name            String
  description     String
  category        String
  type            String
  filter_criteria Json     @default("{}")
  moderator_ids   Json     @default("[]")
  post_count      Int      @default(0)
  member_count    Int      @default(0)
  is_active       Boolean  @default(true)
  is_featured     Boolean  @default(false)
  cover_image     String?
  rules           String?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  @@index([category])
  @@index([type])
  @@index([is_active])
  @@index([is_featured])
  @@index([created_at])
}

model Payment {
  id                  String        @id @default(cuid())
  user_id             String
  subscription_id     String?
  razorpay_payment_id String?
  razorpay_order_id   String        @unique
  amount              Int
  currency            String        @default("INR")
  status              String        @default("created")
  payment_method      String?
  metadata            Json?
  created_at          DateTime      @default(now())
  updated_at          DateTime      @default(now()) @updatedAt
  subscription        Subscription? @relation(fields: [subscription_id], references: [id])
  user                User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  invoices            Invoice[]
  payment_retries     PaymentRetry[]
  vet_appointments    VetAppointment[]

  @@index([user_id])
  @@index([subscription_id])
  @@index([status])
  @@index([razorpay_payment_id])
  @@index([created_at])
}

model Subscription {
  id             String    @id @default(cuid())
  user_id        String
  plan_type      String
  status         String
  start_date     DateTime
  end_date       DateTime
  trial_end_date DateTime
  amount_paid    Int
  currency       String    @default("INR")
  billing_cycle  String
  auto_renew     Boolean   @default(true)
  metadata       Json?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now()) @updatedAt
  payments         Payment[]
  user             User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  coupon_usages     CouponUsage[]
  invoices          Invoice[]
  payment_retries   PaymentRetry[]
  dunning_campaigns DunningCampaign[]
  consultation_credits ConsultationCredit[]

  @@index([user_id])
  @@index([status])
  @@index([end_date])
  @@index([trial_end_date])
  @@index([created_at])
}

model PartnerCommission {
  id                String         @id @default(cuid())
  partner_id        String
  partner_type      String
  user_id           String
  service_type      String
  base_amount       Int
  commission_rate   Float
  commission_amount Int
  status            String         @default("pending")
  reference_id      String
  reference_type    String
  payout_id         String?
  metadata          Json?
  created_at        DateTime       @default(now())
  updated_at        DateTime       @default(now()) @updatedAt
  payout            PartnerPayout? @relation(fields: [payout_id], references: [id])
  user              User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([partner_id])
  @@index([partner_type])
  @@index([user_id])
  @@index([service_type])
  @@index([status])
  @@index([created_at])
}

model PartnerPayout {
  id             String              @id @default(cuid())
  partner_id     String
  partner_type   String
  total_amount   Int
  payout_method  String
  status         String              @default("processing")
  commission_ids Json
  metadata       Json?
  processed_at   DateTime?
  created_at     DateTime            @default(now())
  updated_at     DateTime            @default(now()) @updatedAt
  commissions    PartnerCommission[]

  @@index([partner_id])
  @@index([partner_type])
  @@index([status])
  @@index([created_at])
}

model DogPhoto {
  id               String   @id @default(cuid())
  dog_id           String
  photo_url        String
  caption          String?
  is_profile_photo Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt
  dog              Dog      @relation(fields: [dog_id], references: [id], onDelete: Cascade)

  @@index([dog_id])
  @@index([is_profile_photo])
  @@index([created_at])
}

model UserBehaviorAnalytics {
  id                 String   @id @default(cuid())
  user_id            String?
  session_id         String
  action_type        String
  page_url           String?
  element_clicked    String?
  time_spent_seconds Int?
  device_type        String?
  browser            String?
  location_city      String?
  language           String   @default("en")
  ab_variant         String?
  referrer           String?
  error_code         String?
  metadata           Json?    @default("{}")
  timestamp          DateTime @default(now())
  user               User?    @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([session_id])
  @@index([action_type])
  @@index([timestamp])
  @@index([device_type])
  @@index([language])
}

model SearchAnalytics {
  id                      String   @id @default(cuid())
  user_id                 String?
  search_query            String
  search_type             String
  language                String   @default("en")
  results_count           Int?
  clicked_result_position Int?
  clicked_result_id       String?
  search_duration_ms      Int?
  no_results              Boolean  @default(false)
  filters_applied         Json?    @default("{}")
  created_at              DateTime @default(now())
  user                    User?    @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([search_type])
  @@index([language])
  @@index([created_at])
  @@index([no_results])
}

model AIRecommendation {
  id                  String    @id @default(cuid())
  user_id             String
  dog_id              String?
  recommendation_type String
  title               String
  description         String
  confidence_score    Float
  data_sources        Json
  action_url          String?
  priority            String    @default("medium")
  status              String    @default("active")
  expires_at          DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
  dog                 Dog?      @relation(fields: [dog_id], references: [id])
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([dog_id])
  @@index([recommendation_type])
  @@index([status])
  @@index([priority])
  @@index([expires_at])
  @@index([created_at])
}

model PerformanceMetric {
  id                String   @id @default(cuid())
  metric_name       String
  metric_value      Float
  measurement_unit  String
  endpoint          String?
  response_time_ms  Int?
  memory_usage_mb   Float?
  cpu_usage_percent Float?
  user_count        Int?
  error_rate        Float?
  timestamp         DateTime @default(now())
  metadata          Json?    @default("{}")

  @@index([metric_name])
  @@index([endpoint])
  @@index([timestamp])
}

model CommunityAnalytics {
  id               String   @id @default(cuid())
  date             DateTime
  metric_type      String
  category         String?
  language         String   @default("en")
  count            Int      @default(0)
  engagement_score Float?
  quality_score    Float?
  created_at       DateTime @default(now())

  @@unique([date, metric_type, category, language])
  @@index([date])
  @@index([metric_type])
  @@index([language])
}

model ABTest {
  id               String              @id @default(cuid())
  test_name        String              @unique
  description      String?
  start_date       DateTime
  end_date         DateTime?
  variant_a_config Json
  variant_b_config Json
  target_metric    String
  status           String              @default("active")
  created_at       DateTime            @default(now())
  updated_at       DateTime            @default(now()) @updatedAt
  participants     ABTestParticipant[]

  @@index([status])
  @@index([start_date])
  @@index([end_date])
}

model ABTestParticipant {
  id               String    @id @default(cuid())
  test_id          String
  user_id          String
  variant          String
  assigned_at      DateTime  @default(now())
  converted        Boolean   @default(false)
  conversion_at    DateTime?
  conversion_value Float?
  test             ABTest    @relation(fields: [test_id], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([test_id, user_id])
  @@index([test_id])
  @@index([user_id])
  @@index([variant])
  @@index([converted])
}

model PushNotification {
  id            String    @id @default(cuid())
  user_id       String?
  title         String
  body          String
  type          String
  action_url    String?
  scheduled_for DateTime?
  sent_at       DateTime?
  delivered_at  DateTime?
  clicked_at    DateTime?
  status        String    @default("pending")
  language      String    @default("en")
  metadata      Json?     @default("{}")
  created_at    DateTime  @default(now())
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([type])
  @@index([status])
  @@index([scheduled_for])
  @@index([sent_at])
}

model HealthPrediction {
  id                  String   @id @default(cuid())
  dog_id              String
  prediction_type     String
  predicted_condition String?
  risk_level          String
  confidence_score    Float
  prediction_data     Json
  recommendations     Json
  verified_by_expert  Boolean  @default(false)
  expert_notes        String?
  status              String   @default("active")
  prediction_date     DateTime
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now()) @updatedAt
  dog                 Dog      @relation(fields: [dog_id], references: [id], onDelete: Cascade)

  @@index([dog_id])
  @@index([prediction_type])
  @@index([risk_level])
  @@index([status])
  @@index([prediction_date])
  @@index([created_at])
}

model ContentRecommendation {
  id                   String    @id @default(cuid())
  user_id              String
  content_type         String
  content_id           String
  recommendation_score Float
  reason               String?
  shown_at             DateTime?
  clicked_at           DateTime?
  dismissed_at         DateTime?
  created_at           DateTime  @default(now())
  user                 User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([content_type])
  @@index([recommendation_score])
  @@index([shown_at])
  @@index([created_at])
}

model UserFunnel {
  id                     String    @id @default(cuid())
  user_id                String    @unique
  signup_date            DateTime
  profile_completed_at   DateTime?
  dog_profile_created_at DateTime?
  first_question_at      DateTime?
  first_answer_at        DateTime?
  first_health_log_at    DateTime?
  first_booking_at       DateTime?
  premium_signup_at      DateTime?
  current_stage          String    @default("signup")
  language               String    @default("en")
  acquisition_source     String?
  city                   String?
  updated_at             DateTime  @default(now()) @updatedAt
  user                   User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([current_stage])
  @@index([signup_date])
  @@index([language])
  @@index([acquisition_source])
  @@index([city])
}

model DogIdVerification {
  id                       String   @id @default(cuid())
  dog_id                   String
  partner_id               String
  verification_type        String
  access_reason            String
  health_data_accessed     Json     @default("{}")
  location_coordinates     String?
  ip_address               String?
  user_agent               String?
  session_duration_seconds Int?
  verified_at              DateTime @default(now())
  verified_by              String?
  audit_metadata           Json     @default("{}")
  created_at               DateTime @default(now())
  updated_at               DateTime @default(now()) @updatedAt
  dog                      Dog      @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  partner                  Partner  @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  verifier                 User?    @relation("VerifierUser", fields: [verified_by], references: [id])

  @@index([partner_id, verified_at])
  @@index([dog_id, verified_at])
  @@index([verification_type])
  @@index([verified_at])
}

model SecurityAuditLog {
  id                 String   @id @default(cuid())
  partner_id         String?
  user_id            String?
  action_type        String
  resource_accessed  String?
  success            Boolean
  failure_reason     String?
  ip_address         String?
  user_agent         String?
  location_country   String?
  location_city      String?
  risk_score         Int      @default(0)
  flagged_for_review Boolean  @default(false)
  created_at         DateTime @default(now())
  partner            Partner? @relation(fields: [partner_id], references: [id])
  user               User?    @relation(fields: [user_id], references: [id])

  @@index([partner_id, created_at])
  @@index([risk_score, created_at])
  @@index([action_type])
  @@index([success])
  @@index([flagged_for_review])
}

model PartnerNotification {
  id                String    @id @default(cuid())
  partner_id        String
  notification_type String
  title             String
  message           String
  action_url        String?
  priority          String    @default("normal")
  read_at           DateTime?
  created_at        DateTime  @default(now())
  partner           Partner   @relation(fields: [partner_id], references: [id], onDelete: Cascade)

  @@index([partner_id, created_at])
  @@index([notification_type])
  @@index([priority])
  @@index([read_at])
}

model EmergencyQRCode {
  id             String               @id @default(cuid())
  dog_id         String               @unique
  qr_code        String               @unique
  emergency_data Json
  access_count   Int                  @default(0)
  last_accessed  DateTime?
  is_active      Boolean              @default(true)
  expires_at     DateTime?
  created_at     DateTime             @default(now())
  updated_at     DateTime             @default(now()) @updatedAt
  access_logs    EmergencyAccessLog[]
  alerts         EmergencyAlert[]
  dog            Dog                  @relation(fields: [dog_id], references: [id], onDelete: Cascade)

  @@index([is_active, expires_at])
  @@index([qr_code])
}

model EmergencyVetLocation {
  id                 String                 @id @default(cuid())
  name               String
  address            String
  city               String
  state              String
  pincode            String
  phone              String
  emergency_phone    String?
  email              String?
  website            String?
  latitude           Decimal                @db.Decimal(10, 7)
  longitude          Decimal                @db.Decimal(10, 7)
  is_24_hours        Boolean                @default(false)
  services           Json                   @default("[]")
  rating             Decimal?               @db.Decimal(3, 2)
  verified           Boolean                @default(false)
  emergency_capacity Int                    @default(0)
  current_wait_time  Int                    @default(0)
  accepts_emergency  Boolean                @default(true)
  partner_id         String?
  created_at         DateTime               @default(now())
  updated_at         DateTime               @default(now()) @updatedAt
  assigned_alerts    EmergencyAlert[]
  partner            Partner?               @relation(fields: [partner_id], references: [id])
  schedules          VetEmergencySchedule[]

  @@index([city, state])
  @@index([latitude, longitude])
  @@index([is_24_hours, accepts_emergency])
  @@index([verified])
}

model EmergencyAccessLog {
  id                String          @id @default(cuid())
  qr_code_id        String
  dog_id            String
  access_type       String
  accessor_info     Json            @default("{}")
  location_data     Json?
  emergency_level   String          @default("normal")
  vet_contacted     String?
  resolution_status String          @default("pending")
  access_timestamp  DateTime        @default(now())
  ip_address        String?
  user_agent        String?
  dog               Dog             @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  qr_code           EmergencyQRCode @relation(fields: [qr_code_id], references: [id], onDelete: Cascade)

  @@index([qr_code_id])
  @@index([dog_id, access_timestamp])
  @@index([emergency_level])
  @@index([access_timestamp])
}

model VetEmergencySchedule {
  id              String               @id @default(cuid())
  vet_location_id String
  day_of_week     Int
  open_time       String?
  close_time      String?
  is_24_hours     Boolean              @default(false)
  emergency_only  Boolean              @default(false)
  max_capacity    Int                  @default(10)
  notes           String?
  created_at      DateTime             @default(now())
  updated_at      DateTime             @default(now()) @updatedAt
  vet_location    EmergencyVetLocation @relation(fields: [vet_location_id], references: [id], onDelete: Cascade)

  @@index([vet_location_id, day_of_week])
}

model EmergencyAlert {
  id                   String                @id @default(cuid())
  dog_id               String
  qr_code_id           String?
  alert_type           String
  severity             String                @default("medium")
  location_latitude    Decimal?              @db.Decimal(10, 7)
  location_longitude   Decimal?              @db.Decimal(10, 7)
  location_description String?
  description          String
  contact_info         Json                  @default("{}")
  status               String                @default("active")
  assigned_vet_id      String?
  resolution_notes     String?
  created_at           DateTime              @default(now())
  updated_at           DateTime              @default(now()) @updatedAt
  resolved_at          DateTime?
  assigned_vet         EmergencyVetLocation? @relation(fields: [assigned_vet_id], references: [id])
  dog                  Dog                   @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  qr_code              EmergencyQRCode?      @relation(fields: [qr_code_id], references: [id])

  @@index([dog_id, status])
  @@index([alert_type, severity])
  @@index([location_latitude, location_longitude])
  @@index([status, created_at])
}

model MedicalRecordShare {
  id                     String                @id @default(cuid())
  dog_id                 String
  shared_by_user_id      String
  shared_with_partner_id String?
  shared_with_email      String?
  share_type             String
  access_level           String                @default("read_only")
  record_ids             Json                  @default("[]")
  permissions            Json                  @default("{}")
  share_token            String?               @unique
  expires_at             DateTime?
  is_active              Boolean               @default(true)
  consent_given          Boolean               @default(false)
  consent_timestamp      DateTime?
  consent_ip_address     String?
  revoked_at             DateTime?
  revoked_reason         String?
  created_at             DateTime              @default(now())
  updated_at             DateTime              @default(now()) @updatedAt
  access_logs            MedicalRecordAccess[]
  dog                    Dog                   @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  shared_by_user         User                  @relation(fields: [shared_by_user_id], references: [id], onDelete: Cascade)
  shared_with_partner    Partner?              @relation(fields: [shared_with_partner_id], references: [id], onDelete: Cascade)

  @@index([dog_id, is_active])
  @@index([shared_with_partner_id])
  @@index([share_token])
  @@index([expires_at])
}

model MedicalRecordAccess {
  id                      String             @id @default(cuid())
  share_id                String
  dog_id                  String
  accessor_partner_id     String?
  accessor_email          String?
  access_type             String
  record_id               String?
  record_type             String?
  data_accessed           Json               @default("{}")
  access_reason           String?
  consent_verified        Boolean            @default(false)
  ip_address              String?
  user_agent              String?
  session_id              String?
  compliance_flags        Json               @default("{}")
  access_duration_seconds Int?
  created_at              DateTime           @default(now())
  accessor_partner        Partner?           @relation(fields: [accessor_partner_id], references: [id])
  dog                     Dog                @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  share                   MedicalRecordShare @relation(fields: [share_id], references: [id], onDelete: Cascade)

  @@index([share_id, created_at])
  @@index([dog_id, created_at])
  @@index([accessor_partner_id])
  @@index([access_type])
}

model SecureDataVault {
  id                 String    @id @default(cuid())
  dog_id             String
  data_type          String
  original_filename  String?
  file_type          String?
  file_size_bytes    Int?
  encryption_key_id  String
  encrypted_data     Bytes?
  encrypted_metadata Json?
  checksum           String
  access_count       Int       @default(0)
  last_accessed      DateTime?
  retention_policy   String    @default("indefinite")
  compliance_level   String    @default("hipaa")
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now()) @updatedAt
  dog                Dog       @relation(fields: [dog_id], references: [id], onDelete: Cascade)

  @@index([dog_id, data_type])
  @@index([encryption_key_id])
  @@index([created_at])
}

model PartnerNetworkConnection {
  id                    String    @id @default(cuid())
  requesting_partner_id String
  target_partner_id     String
  connection_type       String
  status                String    @default("pending")
  permissions           Json      @default("{}")
  trust_level           Int       @default(50)
  approved_by           String?
  approved_at           DateTime?
  last_interaction      DateTime?
  interaction_count     Int       @default(0)
  created_at            DateTime  @default(now())
  updated_at            DateTime  @default(now()) @updatedAt
  approver              User?     @relation(fields: [approved_by], references: [id])
  requesting_partner    Partner   @relation("RequestingPartner", fields: [requesting_partner_id], references: [id], onDelete: Cascade)
  target_partner        Partner   @relation("TargetPartner", fields: [target_partner_id], references: [id], onDelete: Cascade)

  @@unique([requesting_partner_id, target_partner_id])
  @@index([requesting_partner_id])
  @@index([target_partner_id])
  @@index([status])
}

model SharingAnalytics {
  id           String   @id @default(cuid())
  dog_id       String?
  partner_id   String?
  share_id     String?
  metric_type  String
  metric_value Int      @default(1)
  metadata     Json     @default("{}")
  date         DateTime @db.Date
  hour         Int?
  created_at   DateTime @default(now())
  dog          Dog?     @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  partner      Partner? @relation(fields: [partner_id], references: [id], onDelete: Cascade)

  @@index([date, metric_type])
  @@index([dog_id, date])
  @@index([partner_id, date])
}

model ComplianceAudit {
  id                   String    @id @default(cuid())
  audit_type           String
  entity_type          String
  entity_id            String
  compliance_status    String
  audit_details        Json      @default("{}")
  risk_score           Int       @default(0)
  remediation_required Boolean   @default(false)
  remediation_deadline DateTime?
  remediated_at        DateTime?
  auditor_id           String?
  created_at           DateTime  @default(now())
  auditor              User?     @relation(fields: [auditor_id], references: [id])

  @@index([entity_type, entity_id])
  @@index([compliance_status])
  @@index([risk_score])
  @@index([created_at])
}

model DataSharingConsent {
  id                 String    @id @default(cuid())
  user_id            String
  dog_id             String
  consent_type       String
  consent_status     String    @default("pending")
  consent_text       String
  consent_version    String
  granted_at         DateTime?
  revoked_at         DateTime?
  ip_address         String?
  user_agent         String?
  digital_signature  String?
  witness_partner_id String?
  expiry_date        DateTime?
  auto_renewal       Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now()) @updatedAt
  dog                Dog       @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  user               User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  witness_partner    Partner?  @relation(fields: [witness_partner_id], references: [id])

  @@index([user_id, dog_id])
  @@index([consent_type, consent_status])
  @@index([expiry_date])
}

model PremiumFeatureUsage {
  id           String   @id
  user_id      String
  feature_name String
  usage_count  Int      @default(1)
  metadata     Json?
  created_at   DateTime @default(now())
  User         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at])
  @@index([feature_name])
  @@index([user_id])
}

// Week 25 Phase 2: Coupon and Billing Management System
model Coupon {
  id                      String        @id @default(cuid())
  code                    String        @unique
  name                    String
  description             String?
  type                    String // 'percentage' | 'fixed_amount' | 'free_trial_extension'
  value                   Float
  minimum_order_amount    Float?
  maximum_discount_amount Float?
  usage_limit             Int?
  usage_limit_per_user    Int?
  current_usage_count     Int           @default(0)
  valid_from              DateTime
  valid_until             DateTime
  applicable_plans        String[]
  first_time_users_only   Boolean       @default(false)
  is_active               Boolean       @default(true)
  created_by              String
  metadata                Json?
  created_at              DateTime      @default(now())
  updated_at              DateTime      @updatedAt
  usage_records           CouponUsage[]

  @@index([type])
  @@index([valid_from])
  @@index([valid_until])
  @@index([is_active])
  @@index([created_by])
}

model CouponUsage {
  id              String       @id @default(cuid())
  coupon_id       String
  user_id         String
  subscription_id String?
  order_amount    Float
  discount_amount Float
  used_at         DateTime     @default(now())
  metadata        Json?
  coupon          Coupon       @relation(fields: [coupon_id], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subscription    Subscription? @relation(fields: [subscription_id], references: [id], onDelete: SetNull)

  @@index([coupon_id])
  @@index([user_id])
  @@index([subscription_id])
  @@index([used_at])
}

model Invoice {
  id              String       @id @default(cuid())
  invoice_number  String       @unique
  user_id         String
  subscription_id String?
  payment_id      String?
  status          String       @default("draft") // 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled'
  invoice_date    DateTime     @default(now())
  due_date        DateTime
  subtotal        Float
  gst_amount      Float
  total_amount    Float
  currency        String       @default("INR")
  payment_method  String?
  paid_at         DateTime?
  gst_details     Json // GST details including GSTIN, billing address
  line_items      Json // Invoice line items with HSN codes
  metadata        Json?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subscription    Subscription? @relation(fields: [subscription_id], references: [id], onDelete: SetNull)
  payment         Payment?     @relation(fields: [payment_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([subscription_id])
  @@index([payment_id])
  @@index([status])
  @@index([invoice_date])
  @@index([due_date])
}

model PaymentRetry {
  id                  String            @id @default(cuid())
  subscription_id     String
  payment_id          String?
  user_id             String
  attempt_number      Int               @default(1)
  max_attempts        Int               @default(3)
  status              String            @default("pending") // 'pending' | 'processing' | 'success' | 'failed' | 'abandoned'
  payment_method      String
  amount              Float
  currency            String            @default("INR")
  next_retry_date     DateTime?
  grace_period_end    DateTime?
  grace_period_active Boolean           @default(false)
  communication_sent  Boolean           @default(false)
  retry_reason        String?
  error_message       String?
  razorpay_order_id   String?
  metadata            Json?
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  subscription        Subscription      @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
  user                User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  payment             Payment?          @relation(fields: [payment_id], references: [id], onDelete: SetNull)
  dunning_campaigns   DunningCampaign[]

  @@index([subscription_id])
  @@index([user_id])
  @@index([status])
  @@index([next_retry_date])
  @@index([grace_period_end])
  @@index([razorpay_order_id])
}

model DunningCampaign {
  id                    String        @id @default(cuid())
  user_id               String
  subscription_id       String
  payment_retry_id      String?
  campaign_type         String // 'payment_failed' | 'payment_retry' | 'grace_period' | 'final_notice'
  status                String        @default("active") // 'active' | 'paused' | 'completed' | 'cancelled'
  communication_channel String        @default("email") // 'email' | 'sms' | 'push_notification'
  message_template      String?
  scheduled_at          DateTime?
  sent_at               DateTime?
  response_received     Boolean       @default(false)
  response_action       String?
  metadata              Json?
  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
  user                  User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subscription          Subscription  @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
  payment_retry         PaymentRetry? @relation(fields: [payment_retry_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([subscription_id])
  @@index([payment_retry_id])
  @@index([campaign_type])
  @@index([status])
  @@index([scheduled_at])
}

// Week 26 Phase 1: Advanced Health Analytics & Reporting System
model HealthAnalyticsReport {
  id                    String   @id @default(cuid())
  dog_id                String
  user_id               String
  report_type           String   // 'monthly', 'quarterly', 'annual', 'custom', 'breed_specific'
  report_period_start   DateTime
  report_period_end     DateTime
  overall_health_score  Int      // 0-100
  trends_analysis       Json     // Weight, activity, eating, behavior trends
  predictions           Json     // Next vet visit, vaccination due, health risks
  recommendations       Json     // Breed-specific, age-appropriate care tips
  insights              Json     // Personalized insights and expert suggestions
  alerts                Json     // Health alerts and concerns
  generated_at          DateTime @default(now())
  is_premium            Boolean  @default(true)
  metadata              Json?    // Additional analytics data
  
  // Relationships
  dog                   Dog      @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([dog_id])
  @@index([user_id])
  @@index([report_type])
  @@index([generated_at])
  @@index([overall_health_score])
}


model HealthTrendAnalysis {
  id                String   @id @default(cuid())
  dog_id            String
  trend_type        String   // 'weight', 'activity', 'eating', 'behavior', 'medication'
  trend_direction   String   // 'increasing', 'decreasing', 'stable', 'fluctuating'
  trend_strength    String   // 'weak', 'moderate', 'strong'
  period_start      DateTime
  period_end        DateTime
  data_points       Json     // Raw data points used for analysis
  trend_insights    Json     // Analysis insights and patterns
  recommendations   Json     // Trend-based recommendations
  alerts            Json     // Any concerning trends
  created_at        DateTime @default(now())
  
  // Relationships
  dog               Dog      @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  
  @@index([dog_id])
  @@index([trend_type])
  @@index([trend_direction])
  @@index([period_start])
  @@index([period_end])
}

model BreedHealthInsight {
  id                    String   @id @default(cuid())
  breed                 String
  age_group             String   // 'puppy', 'adult', 'senior'
  common_conditions     String[]
  preventive_care       Json     // Breed-specific preventive care recommendations
  nutrition_guidelines  Json     // Breed-specific nutrition advice
  exercise_requirements Json     // Exercise and activity recommendations
  grooming_needs        Json     // Grooming and care requirements
  seasonal_concerns     Json     // Season-specific health concerns
  lifespan_data         Json     // Average lifespan and aging insights
  health_monitoring     Json     // What to monitor for this breed/age
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  @@unique([breed, age_group])
  @@index([breed])
  @@index([age_group])
}

model HealthAlert {
  id            String   @id @default(cuid())
  dog_id        String
  user_id       String
  alert_type    String   // 'urgent', 'warning', 'info', 'reminder'
  category      String   // 'vaccination', 'medication', 'vet_visit', 'behavior', 'health_trend'
  title         String
  description   String   @db.Text
  priority      String   @default("medium") // 'low', 'medium', 'high', 'urgent'
  status        String   @default("active") // 'active', 'acknowledged', 'resolved', 'dismissed'
  action_required String? // What action the user should take
  due_date      DateTime?
  acknowledged_at DateTime?
  resolved_at   DateTime?
  metadata      Json?
  created_at    DateTime @default(now())
  
  // Relationships
  dog           Dog      @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([dog_id])
  @@index([user_id])
  @@index([alert_type])
  @@index([category])
  @@index([priority])
  @@index([status])
  @@index([due_date])
  @@index([created_at])
}

model PremiumFeature {
  id              String   @id @default(cuid())
  feature_key     String   @unique
  name            String
  description     String   @db.Text
  category        String   // 'health', 'community', 'support', 'insurance', 'booking'
  required_plan   String   // 'premium', 'family'
  is_active       Boolean  @default(true)
  usage_limits    Json?    // Monthly/daily limits if applicable
  feature_config  Json?    // Feature-specific configuration
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  // Relationships
  usage_logs      FeatureUsageLog[]
  
  @@index([feature_key])
  @@index([category])
  @@index([required_plan])
  @@index([is_active])
}

model FeatureUsageLog {
  id              String   @id @default(cuid())
  user_id         String
  feature_id      String
  usage_count     Int      @default(1)
  usage_date      DateTime @default(now())
  session_data    Json?    // Usage session information
  metadata        Json?    // Additional usage context
  
  // Relationships
  user            User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  feature         PremiumFeature @relation(fields: [feature_id], references: [id])
  
  @@index([user_id])
  @@index([feature_id])
  @@index([usage_date])
}

// Week 26 Phase 2: Priority Vet Appointments & Expert Consultations
model VetAppointmentSlot {
  id                String   @id @default(cuid())
  vet_partner_id    String
  slot_date         DateTime
  slot_time         String   // "09:00", "14:30", etc.
  duration_minutes  Int      @default(30)
  slot_type         String   @default("regular") // 'regular', 'premium', 'emergency'
  is_available      Boolean  @default(true)
  is_premium_only   Boolean  @default(false)
  price             Int?     // in paisa (INR)
  max_bookings      Int      @default(1)
  current_bookings  Int      @default(0)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relationships
  vet_partner       Partner             @relation(fields: [vet_partner_id], references: [id], onDelete: Cascade)
  appointments      VetAppointment[]
  
  @@unique([vet_partner_id, slot_date, slot_time])
  @@index([vet_partner_id])
  @@index([slot_date])
  @@index([slot_type])
  @@index([is_available])
  @@index([is_premium_only])
}


model ExpertConsultation {
  id                    String   @id @default(cuid())
  user_id               String
  expert_id             String
  dog_id                String?
  consultation_type     String   // 'qa_session', 'webinar', 'private_consultation', 'emergency'
  topic                 String
  category              String   // 'health', 'behavior', 'nutrition', 'training', 'general'
  question              String   @db.Text
  expert_response       String?  @db.Text
  status                String   @default("pending") // 'pending', 'in_progress', 'completed', 'cancelled'
  priority              String   @default("normal") // 'low', 'normal', 'high', 'urgent'
  scheduled_at          DateTime?
  started_at            DateTime?
  completed_at          DateTime?
  duration_minutes      Int?
  rating                Int?     // 1-5 stars
  feedback              String?
  is_premium_feature    Boolean  @default(true)
  credits_used          Int      @default(1)
  cost                  Int?     // in paisa, if paid consultation
  payment_status        String   @default("free") // 'free', 'paid', 'credits'
  meeting_link          String?
  meeting_password      String?
  follow_up_required    Boolean  @default(false)
  follow_up_scheduled   DateTime?
  expert_notes          String?  @db.Text
  attachments           String[] @default([])
  tags                  String[] @default([])
  is_public             Boolean  @default(false) // Can be shared in community
  view_count            Int      @default(0)
  helpful_votes         Int      @default(0)
  metadata              Json?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relationships
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expert                User     @relation("ExpertConsultations", fields: [expert_id], references: [id], onDelete: Cascade)
  dog                   Dog?     @relation(fields: [dog_id], references: [id], onDelete: SetNull)
  emergency_sessions    EmergencyConsultation[]
  
  @@index([user_id])
  @@index([expert_id])
  @@index([dog_id])
  @@index([consultation_type])
  @@index([category])
  @@index([status])
  @@index([priority])
  @@index([scheduled_at])
  @@index([is_premium_feature])
  @@index([is_public])
  @@index([created_at])
}

model ConsultationCredit {
  id                String   @id @default(cuid())
  user_id           String
  credit_type       String   // 'monthly', 'bonus', 'emergency', 'promotional'
  credits_total     Int
  credits_used      Int      @default(0)
  credits_remaining Int
  expires_at        DateTime?
  issued_at         DateTime @default(now())
  issued_reason     String?  // 'subscription', 'bonus', 'promotion', 'compensation'
  subscription_id   String?
  metadata          Json?
  
  // Relationships
  user              User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subscription      Subscription? @relation(fields: [subscription_id], references: [id], onDelete: SetNull)
  
  @@index([user_id])
  @@index([credit_type])
  @@index([expires_at])
  @@index([subscription_id])
  @@index([issued_at])
}

model VetPartnerProfile {
  id                    String   @id @default(cuid())
  partner_id            String   @unique
  specializations       String[] @default([])
  qualifications        String[] @default([])
  experience_years      Int?
  consultation_fee      Int?     // in paisa
  emergency_available   Boolean  @default(false)
  telemedicine_enabled  Boolean  @default(false)
  languages             String[] @default(["English"])
  availability_schedule Json?    // Weekly schedule
  max_daily_appointments Int     @default(20)
  rating_average        Float    @default(0.0)
  rating_count          Int      @default(0)
  total_consultations   Int      @default(0)
  premium_partner       Boolean  @default(false)
  priority_booking      Boolean  @default(false)
  response_time_hours   Int      @default(24)
  bio                   String?  @db.Text
  education             Json?
  certifications        Json?
  clinic_photos         String[] @default([])
  consultation_types    String[] @default([])
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relationships
  partner               Partner  @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  
  @@index([partner_id])
  @@index([specializations])
  @@index([emergency_available])
  @@index([telemedicine_enabled])
  @@index([premium_partner])
  @@index([rating_average])
}

model ExpertProfile {
  id                    String   @id @default(cuid())
  user_id               String   @unique
  expert_type           String   // 'veterinarian', 'trainer', 'behaviorist', 'nutritionist'
  specializations       String[] @default([])
  qualifications        String[] @default([])
  experience_years      Int?
  verification_status   String   @default("pending") // 'pending', 'verified', 'rejected'
  verified_at           DateTime?
  verified_by           String?
  consultation_rate     Int?     // credits per consultation
  availability_status   String   @default("available") // 'available', 'busy', 'offline'
  languages             String[] @default(["English"])
  bio                   String?  @db.Text
  expertise_areas       String[] @default([])
  consultation_count    Int      @default(0)
  rating_average        Float    @default(0.0)
  rating_count          Int      @default(0)
  response_time_hours   Int      @default(4)
  max_daily_consultations Int    @default(10)
  premium_expert        Boolean  @default(false)
  featured_expert       Boolean  @default(false)
  education             Json?
  certifications        Json?
  social_links          Json?
  consultation_types    String[] @default([])
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relationships
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  verifier              User?    @relation("ExpertVerifier", fields: [verified_by], references: [id], onDelete: SetNull)
  
  @@index([user_id])
  @@index([expert_type])
  @@index([verification_status])
  @@index([availability_status])
  @@index([premium_expert])
  @@index([featured_expert])
  @@index([rating_average])
}

model EmergencyConsultation {
  id                String   @id @default(cuid())
  user_id           String
  dog_id            String
  emergency_type    String   // 'urgent_health', 'injury', 'poisoning', 'behavioral_crisis'
  severity_level    String   // 'low', 'medium', 'high', 'critical'
  description       String   @db.Text
  symptoms          String[] @default([])
  photos            String[] @default([])
  location          Json?    // User's location for nearby help
  status            String   @default("submitted") // 'submitted', 'triaged', 'assigned', 'in_progress', 'resolved'
  assigned_expert   String?
  assigned_at       DateTime?
  response_time_minutes Int?
  consultation_id   String?
  vet_appointment_id String?
  immediate_advice  String?  @db.Text
  requires_immediate_care Boolean @default(false)
  veterinary_referral String?
  follow_up_required Boolean @default(true)
  resolution_notes  String?  @db.Text
  satisfaction_rating Int?   // 1-5
  is_premium_user   Boolean  @default(false)
  credits_used      Int      @default(2) // Emergency consultations cost more
  created_at        DateTime @default(now())
  resolved_at       DateTime?
  
  // Relationships
  user              User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  dog               Dog                 @relation(fields: [dog_id], references: [id], onDelete: Cascade)
  expert            User?               @relation("EmergencyExpert", fields: [assigned_expert], references: [id], onDelete: SetNull)
  consultation      ExpertConsultation? @relation(fields: [consultation_id], references: [id], onDelete: SetNull)
  vet_appointment   VetAppointment?     @relation(fields: [vet_appointment_id], references: [id], onDelete: SetNull)
  
  @@index([user_id])
  @@index([dog_id])
  @@index([emergency_type])
  @@index([severity_level])
  @@index([status])
  @@index([assigned_expert])
  @@index([is_premium_user])
  @@index([created_at])
}

// ============================================
// Week 28: Events System Models
// ============================================

model Event {
  id                  String   @id @default(cuid())
  title               String
  description         String   @db.Text
  event_type          String   // meetup, workshop, webinar, health_camp, competition, virtual
  category            String   // educational, social, health, competition, virtual, festival
  status              String   @default("draft") // draft, published, cancelled, completed
  is_virtual          Boolean  @default(false)
  is_premium_only     Boolean  @default(false)
  is_featured         Boolean  @default(false)
  
  // Scheduling
  start_date          DateTime
  end_date            DateTime
  timezone            String   @default("Asia/Kolkata")
  registration_start  DateTime?
  registration_end    DateTime?
  
  // Capacity Management
  max_participants    Int?
  current_participants Int     @default(0)
  waiting_list_enabled Boolean @default(true)
  allow_guests        Boolean  @default(false)
  max_guests_per_user Int      @default(1)
  
  // Location
  venue_name          String?
  address             String?
  city                String
  state               String   @default("Maharashtra")
  country             String   @default("India")
  latitude            Float?
  longitude           Float?
  virtual_link        String?
  
  // Pricing
  is_free             Boolean  @default(true)
  price               Int?     // in paisa
  currency            String   @default("INR")
  refund_policy       String?
  
  // Content
  agenda              Json?    // Event agenda/schedule
  requirements        String[] @default([]) // What to bring, prerequisites
  tags                String[] @default([])
  cover_image_url     String?
  additional_images   String[] @default([])
  
  // Organization
  organizer_id        String
  co_organizers       String[] @default([])
  partner_organizations String[] @default([])
  
  // Settings
  auto_approve_rsvp   Boolean  @default(true)
  send_reminders      Boolean  @default(true)
  allow_photos        Boolean  @default(true)
  is_recurring        Boolean  @default(false)
  recurring_pattern   Json?    // For recurring events
  
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  
  // Relationships
  organizer           User           @relation("EventOrganizer", fields: [organizer_id], references: [id])
  rsvps               EventRSVP[]
  waiting_list        EventWaitingList[]
  photos              EventPhoto[]
  comments            EventComment[]
  updates             EventUpdate[]
  feedback            EventFeedback[]
  check_ins           EventCheckIn[]
  
  @@index([organizer_id])
  @@index([event_type])
  @@index([category])
  @@index([status])
  @@index([city])
  @@index([start_date])
  @@index([is_featured])
  @@index([is_premium_only])
  @@map("events")
}

model EventRSVP {
  id                String   @id @default(cuid())
  event_id          String
  user_id           String
  status            String   @default("confirmed") // confirmed, cancelled, no_show
  rsvp_date         DateTime @default(now())
  guest_count       Int      @default(0)
  guest_names       String[] @default([])
  special_requirements String?
  payment_status    String?  @default("pending") // pending, paid, refunded
  payment_id        String?
  
  // Communication preferences
  email_reminders   Boolean  @default(true)
  sms_reminders     Boolean  @default(false)
  push_reminders    Boolean  @default(true)
  
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relationships
  event             Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([event_id, user_id])
  @@index([event_id])
  @@index([user_id])
  @@index([status])
  @@map("event_rsvps")
}

model EventWaitingList {
  id              String   @id @default(cuid())
  event_id        String
  user_id         String
  position        Int
  joined_at       DateTime @default(now())
  notified_at     DateTime?
  promoted_at     DateTime?
  status          String   @default("waiting") // waiting, promoted, expired
  
  // Relationships
  event           Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([event_id, user_id])
  @@index([event_id])
  @@index([user_id])
  @@index([status])
  @@map("event_waiting_list")
}

model EventPhoto {
  id              String   @id @default(cuid())
  event_id        String
  uploaded_by     String
  photo_url       String
  thumbnail_url   String?
  caption         String?
  tagged_users    String[] @default([])
  is_featured     Boolean  @default(false)
  is_approved     Boolean  @default(true)
  uploaded_at     DateTime @default(now())
  
  // Photo metadata
  width           Int?
  height          Int?
  file_size       Int?
  camera_info     Json?
  
  // Relationships
  event           Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  uploader        User     @relation("EventPhotoUploader", fields: [uploaded_by], references: [id], onDelete: Cascade)
  likes           EventPhotoLike[]
  
  @@index([event_id])
  @@index([uploaded_by])
  @@index([is_featured])
  @@map("event_photos")
}

model EventPhotoLike {
  id        String   @id @default(cuid())
  photo_id  String
  user_id   String
  liked_at  DateTime @default(now())
  
  // Relationships
  photo     EventPhoto @relation(fields: [photo_id], references: [id], onDelete: Cascade)
  user      User       @relation("EventPhotoLiker", fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([photo_id, user_id])
  @@index([photo_id])
  @@index([user_id])
  @@map("event_photo_likes")
}

model EventComment {
  id          String   @id @default(cuid())
  event_id    String
  user_id     String
  comment     String   @db.Text
  parent_id   String?  // For threaded comments
  is_approved Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relationships
  event       Event          @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user        User           @relation("EventCommenter", fields: [user_id], references: [id], onDelete: Cascade)
  parent      EventComment?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies     EventComment[] @relation("CommentReplies")
  
  @@index([event_id])
  @@index([user_id])
  @@index([parent_id])
  @@map("event_comments")
}

model EventUpdate {
  id          String   @id @default(cuid())
  event_id    String
  title       String
  message     String   @db.Text
  update_type String   @default("general") // general, important, cancellation, reschedule
  sent_to     String   @default("all") // all, rsvp_only, waiting_list
  created_by  String
  created_at  DateTime @default(now())
  
  // Relationships
  event       Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  creator     User     @relation("EventUpdater", fields: [created_by], references: [id])
  
  @@index([event_id])
  @@index([created_by])
  @@index([update_type])
  @@map("event_updates")
}

model EventFeedback {
  id              String   @id @default(cuid())
  event_id        String
  user_id         String
  overall_rating  Int      // 1-5
  venue_rating    Int?     // 1-5
  content_rating  Int?     // 1-5
  organization_rating Int? // 1-5
  would_recommend Boolean  @default(true)
  feedback_text   String?  @db.Text
  suggestions     String?  @db.Text
  submitted_at    DateTime @default(now())
  
  // Relationships
  event           Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user            User     @relation("EventFeedbackProvider", fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([event_id, user_id])
  @@index([event_id])
  @@index([user_id])
  @@map("event_feedback")
}

model EventCheckIn {
  id              String   @id @default(cuid())
  event_id        String
  user_id         String
  check_in_time   DateTime @default(now())
  check_in_method String   @default("manual") // manual, qr_code, geofence
  latitude        Float?
  longitude       Float?
  notes           String?
  
  // Relationships
  event           Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user            User     @relation("EventCheckInUser", fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([event_id, user_id])
  @@index([event_id])
  @@index([user_id])
  @@map("event_check_ins")
}

model EventSeries {
  id              String   @id @default(cuid())
  name            String
  description     String   @db.Text
  organizer_id    String
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  
  // Recurring event settings
  frequency       String   // weekly, monthly, custom
  recurring_pattern Json   // Detailed recurrence rules
  
  // Relationships
  organizer       User     @relation("EventSeriesOrganizer", fields: [organizer_id], references: [id])
  
  @@index([organizer_id])
  @@index([is_active])
  @@map("event_series")
}

model Venue {
  id              String   @id @default(cuid())
  name            String
  description     String?
  address         String
  city            String
  state           String
  country         String   @default("India")
  postal_code     String?
  latitude        Float?
  longitude       Float?
  capacity        Int?
  facilities      String[] @default([]) // parking, restrooms, water, shade
  contact_info    Json?    // phone, email, website
  photos          String[] @default([])
  is_verified     Boolean  @default(false)
  is_pet_friendly Boolean  @default(true)
  created_at      DateTime @default(now())
  
  @@index([city])
  @@index([state])
  @@index([is_verified])
  @@index([is_pet_friendly])
  @@map("venues")
}
